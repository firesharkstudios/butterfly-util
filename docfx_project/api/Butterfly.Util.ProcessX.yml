### YamlMime:ManagedReference
items:
- uid: Butterfly.Util.ProcessX
  commentId: T:Butterfly.Util.ProcessX
  id: ProcessX
  parent: Butterfly.Util
  children:
  - Butterfly.Util.ProcessX.AddHttpUrlAcl(System.String)
  - Butterfly.Util.ProcessX.AddHttpUrlAclIfNeeded(System.String)
  - Butterfly.Util.ProcessX.HasHttpUrlAcl(System.String)
  - Butterfly.Util.ProcessX.OpenBrowser(System.String)
  - Butterfly.Util.ProcessX.WaitAndCaptureAsync(System.String,System.String,CancellationToken)
  - Butterfly.Util.ProcessX.WaitForExitAsync(Process,CancellationToken)
  langs:
  - csharp
  - vb
  name: ProcessX
  nameWithType: ProcessX
  fullName: Butterfly.Util.ProcessX
  type: Class
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Util/Butterfly.Util/ProcessX.cs
    id: ProcessX
    path: ../Butterfly.Util/ProcessX.cs
    startLine: 11
  assemblies:
  - Butterfly.Util
  namespace: Butterfly.Util
  syntax:
    content: 'public static class ProcessX : object'
    content.vb: >-
      Public Module ProcessX

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Butterfly.Util.ProcessX.OpenBrowser(System.String)
  commentId: M:Butterfly.Util.ProcessX.OpenBrowser(System.String)
  id: OpenBrowser(System.String)
  parent: Butterfly.Util.ProcessX
  langs:
  - csharp
  - vb
  name: OpenBrowser(String)
  nameWithType: ProcessX.OpenBrowser(String)
  fullName: Butterfly.Util.ProcessX.OpenBrowser(System.String)
  type: Method
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Util/Butterfly.Util/ProcessX.cs
    id: OpenBrowser
    path: ../Butterfly.Util/ProcessX.cs
    startLine: 15
  assemblies:
  - Butterfly.Util
  namespace: Butterfly.Util
  syntax:
    content: public static void OpenBrowser(string url)
    parameters:
    - id: url
      type: System.String
    content.vb: Public Shared Sub OpenBrowser(url As String)
  overload: Butterfly.Util.ProcessX.OpenBrowser*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Butterfly.Util.ProcessX.AddHttpUrlAclIfNeeded(System.String)
  commentId: M:Butterfly.Util.ProcessX.AddHttpUrlAclIfNeeded(System.String)
  id: AddHttpUrlAclIfNeeded(System.String)
  parent: Butterfly.Util.ProcessX
  langs:
  - csharp
  - vb
  name: AddHttpUrlAclIfNeeded(String)
  nameWithType: ProcessX.AddHttpUrlAclIfNeeded(String)
  fullName: Butterfly.Util.ProcessX.AddHttpUrlAclIfNeeded(System.String)
  type: Method
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Util/Butterfly.Util/ProcessX.cs
    id: AddHttpUrlAclIfNeeded
    path: ../Butterfly.Util/ProcessX.cs
    startLine: 37
  assemblies:
  - Butterfly.Util
  namespace: Butterfly.Util
  syntax:
    content: public static void AddHttpUrlAclIfNeeded(string url)
    parameters:
    - id: url
      type: System.String
    content.vb: Public Shared Sub AddHttpUrlAclIfNeeded(url As String)
  overload: Butterfly.Util.ProcessX.AddHttpUrlAclIfNeeded*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Butterfly.Util.ProcessX.AddHttpUrlAcl(System.String)
  commentId: M:Butterfly.Util.ProcessX.AddHttpUrlAcl(System.String)
  id: AddHttpUrlAcl(System.String)
  parent: Butterfly.Util.ProcessX
  langs:
  - csharp
  - vb
  name: AddHttpUrlAcl(String)
  nameWithType: ProcessX.AddHttpUrlAcl(String)
  fullName: Butterfly.Util.ProcessX.AddHttpUrlAcl(System.String)
  type: Method
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Util/Butterfly.Util/ProcessX.cs
    id: AddHttpUrlAcl
    path: ../Butterfly.Util/ProcessX.cs
    startLine: 44
  assemblies:
  - Butterfly.Util
  namespace: Butterfly.Util
  syntax:
    content: public static void AddHttpUrlAcl(string url)
    parameters:
    - id: url
      type: System.String
    content.vb: Public Shared Sub AddHttpUrlAcl(url As String)
  overload: Butterfly.Util.ProcessX.AddHttpUrlAcl*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Butterfly.Util.ProcessX.HasHttpUrlAcl(System.String)
  commentId: M:Butterfly.Util.ProcessX.HasHttpUrlAcl(System.String)
  id: HasHttpUrlAcl(System.String)
  parent: Butterfly.Util.ProcessX
  langs:
  - csharp
  - vb
  name: HasHttpUrlAcl(String)
  nameWithType: ProcessX.HasHttpUrlAcl(String)
  fullName: Butterfly.Util.ProcessX.HasHttpUrlAcl(System.String)
  type: Method
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Util/Butterfly.Util/ProcessX.cs
    id: HasHttpUrlAcl
    path: ../Butterfly.Util/ProcessX.cs
    startLine: 58
  assemblies:
  - Butterfly.Util
  namespace: Butterfly.Util
  syntax:
    content: public static bool HasHttpUrlAcl(string url)
    parameters:
    - id: url
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function HasHttpUrlAcl(url As String) As Boolean
  overload: Butterfly.Util.ProcessX.HasHttpUrlAcl*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Butterfly.Util.ProcessX.WaitForExitAsync(Process,CancellationToken)
  commentId: M:Butterfly.Util.ProcessX.WaitForExitAsync(Process,CancellationToken)
  id: WaitForExitAsync(Process,CancellationToken)
  isExtensionMethod: true
  parent: Butterfly.Util.ProcessX
  langs:
  - csharp
  - vb
  name: WaitForExitAsync(Process, CancellationToken)
  nameWithType: ProcessX.WaitForExitAsync(Process, CancellationToken)
  fullName: Butterfly.Util.ProcessX.WaitForExitAsync(Process, CancellationToken)
  type: Method
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Util/Butterfly.Util/ProcessX.cs
    id: WaitForExitAsync
    path: ../Butterfly.Util/ProcessX.cs
    startLine: 81
  assemblies:
  - Butterfly.Util
  namespace: Butterfly.Util
  syntax:
    content: public static Task<int> WaitForExitAsync(this Process process, CancellationToken cancellationToken = null)
    parameters:
    - id: process
      type: Process
    - id: cancellationToken
      type: CancellationToken
    return:
      type: Task{System.Int32}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WaitForExitAsync(process As Process, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: Butterfly.Util.ProcessX.WaitForExitAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Butterfly.Util.ProcessX.WaitAndCaptureAsync(System.String,System.String,CancellationToken)
  commentId: M:Butterfly.Util.ProcessX.WaitAndCaptureAsync(System.String,System.String,CancellationToken)
  id: WaitAndCaptureAsync(System.String,System.String,CancellationToken)
  parent: Butterfly.Util.ProcessX
  langs:
  - csharp
  - vb
  name: WaitAndCaptureAsync(String, String, CancellationToken)
  nameWithType: ProcessX.WaitAndCaptureAsync(String, String, CancellationToken)
  fullName: Butterfly.Util.ProcessX.WaitAndCaptureAsync(System.String, System.String, CancellationToken)
  type: Method
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Util/Butterfly.Util/ProcessX.cs
    id: WaitAndCaptureAsync
    path: ../Butterfly.Util/ProcessX.cs
    startLine: 107
  assemblies:
  - Butterfly.Util
  namespace: Butterfly.Util
  syntax:
    content: public static Task<(string, int)> WaitAndCaptureAsync(string fileName, string args, CancellationToken cancellationToken = null)
    parameters:
    - id: fileName
      type: System.String
    - id: args
      type: System.String
    - id: cancellationToken
      type: CancellationToken
    return:
      type: Task{System.ValueTuple{System.String,System.Int32}}
    content.vb: Public Shared Function WaitAndCaptureAsync(fileName As String, args As String, cancellationToken As CancellationToken = Nothing) As Task(Of(String, Integer))
  overload: Butterfly.Util.ProcessX.WaitAndCaptureAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Butterfly.Util
  commentId: N:Butterfly.Util
  name: Butterfly.Util
  nameWithType: Butterfly.Util
  fullName: Butterfly.Util
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Butterfly.Util.ProcessX.OpenBrowser*
  commentId: Overload:Butterfly.Util.ProcessX.OpenBrowser
  name: OpenBrowser
  nameWithType: ProcessX.OpenBrowser
  fullName: Butterfly.Util.ProcessX.OpenBrowser
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Butterfly.Util.ProcessX.AddHttpUrlAclIfNeeded*
  commentId: Overload:Butterfly.Util.ProcessX.AddHttpUrlAclIfNeeded
  name: AddHttpUrlAclIfNeeded
  nameWithType: ProcessX.AddHttpUrlAclIfNeeded
  fullName: Butterfly.Util.ProcessX.AddHttpUrlAclIfNeeded
- uid: Butterfly.Util.ProcessX.AddHttpUrlAcl*
  commentId: Overload:Butterfly.Util.ProcessX.AddHttpUrlAcl
  name: AddHttpUrlAcl
  nameWithType: ProcessX.AddHttpUrlAcl
  fullName: Butterfly.Util.ProcessX.AddHttpUrlAcl
- uid: Butterfly.Util.ProcessX.HasHttpUrlAcl*
  commentId: Overload:Butterfly.Util.ProcessX.HasHttpUrlAcl
  name: HasHttpUrlAcl
  nameWithType: ProcessX.HasHttpUrlAcl
  fullName: Butterfly.Util.ProcessX.HasHttpUrlAcl
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Butterfly.Util.ProcessX.WaitForExitAsync*
  commentId: Overload:Butterfly.Util.ProcessX.WaitForExitAsync
  name: WaitForExitAsync
  nameWithType: ProcessX.WaitForExitAsync
  fullName: Butterfly.Util.ProcessX.WaitForExitAsync
- uid: Process
  commentId: '!:Process'
  isExternal: true
  name: Process
  nameWithType: Process
  fullName: Process
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Task{System.Int32}
  commentId: '!:Task{System.Int32}'
  definition: Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Util.ProcessX.WaitAndCaptureAsync*
  commentId: Overload:Butterfly.Util.ProcessX.WaitAndCaptureAsync
  name: WaitAndCaptureAsync
  nameWithType: ProcessX.WaitAndCaptureAsync
  fullName: Butterfly.Util.ProcessX.WaitAndCaptureAsync
- uid: Task{System.ValueTuple{System.String,System.Int32}}
  commentId: '!:Task{System.ValueTuple{System.String,System.Int32}}'
  definition: Task`1
  name: Task<ValueTuple<String, Int32>>
  nameWithType: Task<ValueTuple<String, Int32>>
  fullName: Task<System.ValueTuple<System.String, System.Int32>>
  nameWithType.vb: Task(Of ValueTuple(Of String, Int32))
  fullName.vb: Task(Of System.ValueTuple(Of System.String, System.Int32))
  name.vb: Task(Of ValueTuple(Of String, Int32))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
